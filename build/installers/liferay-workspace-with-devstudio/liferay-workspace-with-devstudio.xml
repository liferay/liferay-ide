<project>
    <shortName>LiferayWorkspacewithDevStudio</shortName>
    <fullName>Liferay Workspace with DevStudio</fullName>
    <version></version>
    <logoImage>../shared/images/studio_logo.png</logoImage>
    <componentList>
        <component>
            <name>default</name>
            <description>Default Component</description>
            <canBeEdited>1</canBeEdited>
            <selected>1</selected>
            <show>1</show>
            <folderList>
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfiles</name>
                    <platforms>all</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>../shared/download/biz.aQute.jpm.run.jar</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>../shared/download/blade.jar</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfileslinux_arm64</name>
                    <platforms>linux-arm64</platforms>
                </folder>
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfileslinux_x64</name>
                    <platforms>linux-x64</platforms>
                </folder>
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfileswindows_x64</name>
                    <platforms>windows-x64</platforms>
                </folder>
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfilesosx</name>
                    <platforms>osx</platforms>
                </folder>
            </folderList>
        </component>
        <include file="../components/devstudio-linuxcomponent.xml" />
        <include file="../components/devstudio-osxcomponent.xml" />
        <include file="../components/devstudio-wincomponent.xml" />
        <include file="../components/devstudio-linux-arm64-component.xml" />
    </componentList>
    <preInstallationActionList>
        <include file="../components/autodetect-java.xml" />
        <include file="../components/autodetect-java-windows.xml" />
    </preInstallationActionList>
    <postInstallationActionList>
        <actionGroup explanation="Set proxy arg variables">
            <actionList>
                <setInstallerVariable name="proxyHostArg" value=" -D${proxysetting}.proxyHost=${proxyhost}" />
                <setInstallerVariable name="proxyPortArg" value=" -D${proxysetting}.proxyPort=${proxyport}" />
                <setInstallerVariable name="proxyUsernameArg" value=" -D${proxysetting}.proxyUser=${proxyusername}" />
                <setInstallerVariable name="proxyPasswordArg" value=" -D${proxysetting}.proxyPassword=${proxypassword}" />

                <actionGroup>
                    <actionList>
                        <setInstallerVariable name="proxyUsernameArg" value="" />
                        <setInstallerVariable name="proxyPasswordArg" value="" />
                    </actionList>
                    <ruleList>
                        <compareValues logic="equals" value1="${proxysetting}" value2="socks" />
                    </ruleList>
                </actionGroup>
            </actionList>
            <ruleList>
                <compareValues logic="equals" value1="${proxy}" value2="proxysetting" />
            </ruleList>
        </actionGroup>
        <writeFile explanation="Write password to pwd file">
            <encoding>utf-8</encoding>
            <path>${installdir}${platform_path_separator}pwd</path>
            <text>${password.password}</text>
        </writeFile>
        <deleteFile path="${installdir}${platform_path_separator}pwd" />
        <actionGroup explanation="Install the main program">
            <actionList>
                <findFile>
                    <baseDirectory>${installdir}</baseDirectory>
                    <variable>studioZipPath</variable>
                    <pattern>com.liferay.ide.studio-*.zip</pattern>
                </findFile>
                <actionGroup explanation="Install zip on MacOS">
                    <actionList>
                        <runProgram>
                            <program>chown</program>
                            <programArguments>-R $USER "${installdir}"</programArguments>
                        </runProgram>
                        <runProgram>
                            <program>unzip</program>
                            <programArguments>${studioZipPath}</programArguments>
                            <progressText>unzipping</progressText>
                            <workingDirectory>${installdir}</workingDirectory>
                        </runProgram>
                        <runProgram>
                            <program>chmod</program>
                            <programArguments>+w "${installdir}"/LiferayDeveloperStudio.app/Contents/Eclipse/DeveloperStudio.ini</programArguments>
                        </runProgram>
                        <actionGroup explanation="Set startup JDK">
                            <actionList>
                                <dirName>
                                    <path>${java_executable}</path>
                                    <variable>find_in_path</variable>
                                </dirName>
                                <findFile>
                                    <baseDirectory>${find_in_path}/../</baseDirectory>
                                    <pattern>libjli.dylib</pattern>
                                    <variable>libjli_path</variable>
                                </findFile>
                                <addTextToFile>
                                    <file>${installdir}/LiferayDeveloperStudio.app/Contents/Eclipse/DeveloperStudio.ini</file>
                                    <insertAt>beginning</insertAt>
                                    <text>-vm
${libjli_path}
</text>
                                </addTextToFile>
                            </actionList>
                            <ruleList>
                                <isFalse value="${java_autodetected}" />
                            </ruleList>
                        </actionGroup>
                    </actionList>
                    <ruleList>
                        <platformTest type="osx" />
                    </ruleList>
                </actionGroup>
                <actionGroup explanation="Install zip on Linux and Windows">
                    <actionList>
                        <unzip>
                            <addToUninstaller>0</addToUninstaller>
                            <destinationDirectory>${installdir}</destinationDirectory>
                            <progressText>Unpacking files</progressText>
                            <zipFile>${studioZipPath}</zipFile>
                        </unzip>
                        <addTextToFile explanation="Set startup JDK">
                            <file>${installdir}/liferay-developer-studio/DeveloperStudio.ini</file>
                            <insertAt>beginning</insertAt>
                            <text>-vm
${java_executable}
</text>
                            <ruleList>
                                <isFalse value="${java_autodetected}" />
                            </ruleList>
                        </addTextToFile>
                    </actionList>
                    <ruleList>
                        <platformTest negate="1" type="osx" />
                    </ruleList>
                </actionGroup>
            </actionList>
        </actionGroup>
        <actionGroup explanation="Perform CLI Tools installation actions">
            <actionList>
                <createDirectory>
                    <path>${userHome}${platform_path_separator}.liferay</path>
                    <progressText>Creating directory...</progressText>
                </createDirectory>
                <pathManipulation>
                    <action>nativeAbsolutize</action>
                    <path>${java_executable}/..</path>
                    <variable>java_bin_dir</variable>
                </pathManipulation>
                <if>
                    <explanation>Set extra arguments for JDK 17 and 21</explanation>
                    <actionList>
                        <setInstallerVariable name="extraArgumentForJdk17And21" value="--add-opens java.prefs/java.util.prefs=ALL-UNNAMED"/>
                    </actionList>
                    <conditionRuleList>
                        <regExMatch>
                            <logic>matches</logic>
                            <pattern>.*(17|21).*</pattern>
                            <text>${java_version}</text>
                        </regExMatch>
                    </conditionRuleList>
                    <elseActionList>
                        <setInstallerVariable name="extraArgumentForJdk17And21" value=""/>
                    </elseActionList>
                </if>
                <actionGroup explanation="Set JPM paths">
                    <actionList>
                        <actionGroup>
                            <actionList>
                                <setInstallerVariable name="jpmSystemPath" value="${userHome}/jpm/bin"/>
                                <setInstallerVariable name="jpmSettingPath" value="${userHome}/.jpm"/>
                            </actionList>
                            <ruleList>
                                <platformTest type="linux" />
                            </ruleList>
                        </actionGroup>
                        <actionGroup>
                            <actionList>
                                <setInstallerVariable name="jpmSystemPath" value="${userHome}/Library/PackageManager/bin"/>
                                <setInstallerVariable name="jpmSettingPath" value="${userHome}/.jpm"/>
                            </actionList>
                            <ruleList>
                               <platformTest type="osx" />
                            </ruleList>
                        </actionGroup>
                        <actionGroup>
                            <actionList>
                                <setInstallerVariable name="jpmSystemPath" value="${userHome}\.jpm\windows\bin"/>
                                <setInstallerVariable name="jpmSettingPath" value="${userHome}\.jpm\windows"/>
                            </actionList>
                            <ruleList>
                               <platformTest type="windows" />
                            </ruleList>
                        </actionGroup>
                    </actionList>
                </actionGroup>
                <include file="../components/run-java-jpm.xml" />
                <include file="../components/run-java-jpm-win.xml" />
                <addDirectoryToPath>
                    <insertAt>end</insertAt>
                    <path>${jpmSystemPath}</path>
                </addDirectoryToPath>
                <include file="../components/set-installer-variable-jpm.xml" />
                <include file="../components/set-installer-variable-blade.xml" />
                <include file="../components/run-jpm-install-blade.xml" />
                <include file="../components/run-jpm-install-blade-win.xml" />
                <actionGroup explanation="Update permissions if root and not on Windows">
                    <actionList>
                        <runProgram>
                            <program>chown</program>
                            <programArguments>-R ${env(SUDO_USER)} "${userHome}/jpm"</programArguments>
                            <ruleList>
                                <fileExists path="${userHome}/jpm" />
                            </ruleList>
                        </runProgram>
                        <runProgram>
                            <program>chown</program>
                            <programArguments>-R ${env(SUDO_USER)} ${jpmSettingPath}</programArguments>
                            <ruleList>
                                <fileExists path="${jpmSettingPath}" />
                            </ruleList>
                        </runProgram>
                        <setInstallerVariable name="bladeCommandPath" value="${jpmSystemPath}${platform_path_separator}blade"/>
                        <runProgram>
                            <program>chown</program>
                            <programArguments>-R ${env(SUDO_USER)} ${userHome}/.gradle</programArguments>
                        </runProgram>
                    </actionList>
                    <ruleList>
                        <isTrue value="${installer_is_root_install}" />
                        <platformTest negate="1" type="windows" />
                    </ruleList>
                </actionGroup>
                <actionGroup explanation="Set up Liferay Workspace">
                    <actionList>
                        <if explanation="Set Liferay version variable">
                            <actionList>
                                <setInstallerVariable name="liferayVersion" value="2024.q3" />
                            </actionList>
                            <conditionRuleList>
                                <compareText logic="equals" text="${productkey}" value="dxp" />
                            </conditionRuleList>
                            <elseActionList>
                                <setInstallerVariable name="liferayVersion" value="7.4" />
                            </elseActionList>
                        </if>
                        <runProgram explanation="Run blade init">
                            <program>${java_executable}</program>
                            <programArguments> -jar "${bladeFilePath}" --base "${lrws}" init -v "${liferayVersion}"</programArguments>
                        </runProgram>
                        <actionGroup explanation="Install license if DXP">
                            <actionList>
                                <createDirectory>
                                    <path>${lrws}${platform_path_separator}configs${platform_path_separator}common${platform_path_separator}deploy</path>
                                    <ruleList>
                                        <fileTest>
                                            <condition>exists</condition>
                                            <path>${activationKey}</path>
                                        </fileTest>
                                    </ruleList>
                                </createDirectory>
                                <copyFile>
                                    <destination>${lrws}${platform_path_separator}configs${platform_path_separator}common${platform_path_separator}deploy${platform_path_separator}activation_key.xml</destination>
                                    <origin>${activationKey}</origin>
                                    <ruleList>
                                        <fileTest>
                                            <condition>exists</condition>
                                            <path>${activationKey}</path>
                                        </fileTest>
                                    </ruleList>
                                </copyFile>
                            </actionList>
                            <ruleList>
                                <compareText logic="equals" text="${productkey}" value="dxp" />
                            </ruleList>
                        </actionGroup>
                    </actionList>
                </actionGroup>
                <actionGroup explanation="Configure proxy settings for Blade CLI">
                    <actionList>
                        <setInstallerVariable name="bladeProxyHostArg" value=" -D${proxysetting}.proxyHost=${proxyhost}"/>
                        <setInstallerVariable name="bladeProxyPortArg" value=" -D${proxysetting}.proxyPort=${proxyport}"/>

                        <runProgram>
                            <program>${java_executable}</program>
                            <programArguments> -jar "${installdir}${platform_path_separator}biz.aQute.jpm.run.jar" command --jvmargs "${bladeProxyHostArg} ${bladeProxyPortArg}" jpm</programArguments>
                        </runProgram>
                        <runProgram>
                            <program>${java_executable}</program>
                            <programArguments> -jar "${installdir}${platform_path_separator}biz.aQute.jpm.run.jar" command --jvmargs "${bladeProxyHostArg} ${bladeProxyPortArg}" blade</programArguments>
                        </runProgram>
                    </actionList>
                    <ruleList>
                        <compareText logic="equals" text="${proxy}" value="proxysetting" />
                    </ruleList>
                </actionGroup>
                <createDirectory path="${userHome}${platform_path_separator}.gradle" />
            </actionList>
            <ruleList>
                <isTrue value="${clitools}"/>
            </ruleList>
        </actionGroup>
        <actionGroup explanation="Write proxy properties to gradle.properties file">
            <actionList>
                <setInstallerVariable name="gradlePropertiesFile" value="${userHome}${platform_path_separator}.gradle${platform_path_separator}gradle.properties" />

                <propertiesFileSet file="${gradlePropertiesFile}" key="systemProp.${proxysetting}.proxyHost" value="${proxyhost}" />
                <propertiesFileSet file="${gradlePropertiesFile}" key="systemProp.${proxysetting}.proxyPort" value="${proxyport}" />
                <propertiesFileSet file="${gradlePropertiesFile}" key="systemProp.${proxysetting}.proxyUser" value="${proxyusername}" />
                <propertiesFileSet file="${gradlePropertiesFile}" key="systemProp.${proxysetting}.proxyPassword" value="${proxypassword}" />
            </actionList>
            <ruleList>
                <compareValues logic="equals" value1="${proxy}" value2="proxysetting" />
            </ruleList>
        </actionGroup>
        <runProgram>
            <program>chown</program>
            <programArguments>-R ${env(SUDO_USER)} ${lrws}</programArguments>
            <ruleList>
                <isTrue value="${installer_is_root_install}" />
                <compareText logic="does_not_contain" nocase="1" text="${platform_name}" value="win" />
                <fileExists path="${lrws}" />
            </ruleList>
        </runProgram>
        <deleteFile path="${installdir}${platform_path_separator}blade.jar" />
        <deleteFile path="${installdir}${platform_path_separator}biz.aQute.jpm.run.jar" />
        <deleteFile path="${studioZipPath}" />
    </postInstallationActionList>
    <allowWindowResize>1</allowWindowResize>
    <createOsxBundleDmg>1</createOsxBundleDmg>
    <createUninstaller>0</createUninstaller>
    <disableSplashScreen>1</disableSplashScreen>
    <enableRollback>1</enableRollback>
    <enableTimestamp>1</enableTimestamp>
    <osxPlatforms>osx-x86_64 osx-arm64</osxPlatforms>
    <outputDirectory>../outputs</outputDirectory>
    <showFileUnpackingProgress>0</showFileUnpackingProgress>
    <startMenuGroupName></startMenuGroupName>
    <vendor>Liferay, Inc</vendor>
    <width>600</width>
    <!-- windowsSigningPkcs12File>${build_project_directory}/liferay.pfx</windowsSigningPkcs12File>
    <windowsSigningPkcs12Password>${env(WINDOWS_SIGNING_PASSWORD)}</windowsSigningPkcs12Password>
    <<osxSigningPkcs12File>${build_project_directory}/osx-signing.p12</osxSigningPkcs12File>
    <osxSigningPkcs12Password>${env(OSX_SIGNING_PASSWORD)}</osxSigningPkcs12Password>-->
    <parameterList>
        <fileParameter>
            <name>java_executable</name>
            <title>Select a valid Java(tm) Executable</title>
            <description>Java(tm) Executable</description>
            <explanation>Please select a valid Java(tm) Executable</explanation>
            <value></value>
            <default></default>
            <allowEmptyValue>0</allowEmptyValue>
            <mustBeWritable>0</mustBeWritable>
            <mustExist>1</mustExist>
            <width>30</width>
            <ruleList>
                <isFalse value="${java_autodetected}" />
            </ruleList>
        </fileParameter>
        <directoryParameter>
            <name>installdir</name>
            <description>Installer.Parameter.installdir.description</description>
            <explanation>Installer.Parameter.installdir.explanation</explanation>
            <value></value>
            <default>${platform_install_prefix}/${product_shortname}</default>
            <allowEmptyValue>0</allowEmptyValue>
            <cliOptionName>installDir</cliOptionName>
            <mustBeWritable>1</mustBeWritable>
            <mustExist>0</mustExist>
            <width>30</width>
            <postShowPageActionList>
                <setInstallerVariable name="studiodir" value="${installdir}" />
            </postShowPageActionList>
            <preShowPageActionList>
                <setInstallerVariable name="installdir" value="${userHome}/${product_shortname}">
                    <ruleList>
                        <compareText logic="contains" nocase="1" text="${platform_name}" value="osx" />
                    </ruleList>
                </setInstallerVariable>
            </preShowPageActionList>
            <validationActionList>
                <throwError>
                    <explanation>is empty</explanation>
                    <text>the folder must be empty</text>
                    <ruleList>
                        <fileTest condition="is_not_empty" path="${studiodir}" />
                    </ruleList>
                </throwError>
            </validationActionList>
        </directoryParameter>
        <directoryParameter>
            <name>lrws</name>
            <title>Liferay Workspace</title>
            <description>Directory:</description>
            <explanation></explanation>
            <value></value>
            <default>${installdir}${platform_path_separator}liferay-workspace</default>
            <allowEmptyValue>0</allowEmptyValue>
            <ask>0</ask>
            <mustBeWritable>1</mustBeWritable>
            <mustExist>0</mustExist>
            <width>30</width>
        </directoryParameter>
        <booleanParameterGroup>
            <name>clitools</name>
            <description>Install Command Line Tools</description>
            <explanation>Install Command Line Tools such as blade.</explanation>
            <value></value>
            <default>1</default>
            <parameterList>
                <directoryParameter>
                    <name>userHome</name>
                    <description>Default User Home Directory:</description>
                    <explanation></explanation>
                    <value></value>
                    <default>${user_home_directory}</default>
                    <allowEmptyValue>0</allowEmptyValue>
                    <ask>0</ask>
                    <cliOptionName>userHome</cliOptionName>
                    <cliOptionText>Default User Home</cliOptionText>
                    <mustBeWritable>1</mustBeWritable>
                    <mustExist>1</mustExist>
                    <width>30</width>
                </directoryParameter>
                <labelParameter>
                    <name>initws</name>
                    <description></description>
                    <explanation>Init a Liferay Workspace</explanation>
                    <image></image>
                </labelParameter>
            </parameterList>
        </booleanParameterGroup>
        <choiceParameterGroup>
            <name>productkey</name>
            <title>Select a product to init a liferay workspace</title>
            <description></description>
            <explanation>When initializing a new liferay workpace, Liferay Customers can target to Liferay DXP. Community members should choose Liferay Portal Community Edition.</explanation>
            <value></value>
            <default></default>
            <parameterList>
                <labelParameter>
                    <name>dxp</name>
                    <description>Liferay DXP</description>
                    <explanation></explanation>
                    <image></image>
                </labelParameter>
                <labelParameter>
                    <name>ce</name>
                    <description>Liferay Portal Community Editon</description>
                    <explanation></explanation>
                    <image></image>
                </labelParameter>
            </parameterList>
            <ruleList>
                <isTrue value="${clitools}" />
            </ruleList>
        </choiceParameterGroup>
        <fileParameter>
            <name>activationKey</name>
            <title>DXP Activation Key (Optional)</title>
            <description>activation key file</description>
            <explanation>Please select the activation key file for Liferay DXP. If you skip this step, you can add the activation key into auto-deploy folder later.</explanation>
            <value></value>
            <default></default>
            <allowEmptyValue>1</allowEmptyValue>
            <mustBeWritable>0</mustBeWritable>
            <mustExist>1</mustExist>
            <width>30</width>
            <ruleList>
                <isTrue value="${clitools}" />
                <compareText logic="equals" text="${productkey}" value="dxp" />
            </ruleList>
        </fileParameter>
        <choiceParameterGroup>
            <name>proxy</name>
            <description>Proxy Configuration</description>
            <explanation>To configure the proxy settings for Liferay workspace, select "Configure proxy settings" below.  These settings will be saved in ~/.gradle/gradle.properties.</explanation>
            <value></value>
            <default>skipproxysetting</default>
            <parameterList>
                <labelParameter>
                    <name>skipproxysetting</name>
                    <description>Skip proxy configuration</description>
                    <explanation></explanation>
                    <image></image>
                </labelParameter>
                <choiceParameter>
                    <name>proxysetting</name>
                    <description>Configure proxy settings</description>
                    <explanation></explanation>
                    <value></value>
                    <default>http</default>
                    <allowEmptyValue>0</allowEmptyValue>
                    <displayType>combobox</displayType>
                    <ordering>default</ordering>
                    <width>40</width>
                    <optionList>
                        <option>
                            <description></description>
                            <image></image>
                            <text>HTTP Proxy</text>
                            <value>http</value>
                        </option>
                        <option>
                            <description></description>
                            <image></image>
                            <text>HTTPS Proxy</text>
                            <value>https</value>
                        </option>
                        <option>
                            <description></description>
                            <image></image>
                            <text>SOCKS5 Proxy</text>
                            <value>socks</value>
                        </option>
                    </optionList>
                </choiceParameter>
            </parameterList>
        </choiceParameterGroup>
        <parameterGroup>
            <name>proxyinfo</name>
            <title>Proxy Information (${proxysetting})</title>
            <explanation></explanation>
            <value></value>
            <default></default>
            <parameterList>
                <stringParameter>
                    <name>proxyhost</name>
                    <description>Proxy Host</description>
                    <explanation></explanation>
                    <value></value>
                    <default></default>
                    <allowEmptyValue>1</allowEmptyValue>
                    <width>30</width>
                </stringParameter>
                <stringParameter>
                    <name>proxyport</name>
                    <description>Proxy Port</description>
                    <explanation></explanation>
                    <value></value>
                    <default></default>
                    <allowEmptyValue>1</allowEmptyValue>
                    <width>30</width>
                </stringParameter>
                <stringParameter>
                    <name>proxyusername</name>
                    <description>Proxy Username</description>
                    <explanation></explanation>
                    <value></value>
                    <default></default>
                    <allowEmptyValue>1</allowEmptyValue>
                    <width>30</width>
                </stringParameter>
                <stringParameter>
                    <name>proxypassword</name>
                    <description>Proxy Password</description>
                    <explanation></explanation>
                    <value></value>
                    <default></default>
                    <allowEmptyValue>1</allowEmptyValue>
                    <width>30</width>
                </stringParameter>
            </parameterList>
            <ruleList>
                <compareValues logic="equals" value1="${proxy}" value2="proxysetting" />
            </ruleList>
        </parameterGroup>
    </parameterList>
</project>

